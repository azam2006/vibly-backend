const Notification = require("../model/notificationM");


const notficantionCtrl={
getNTF: async (req, res) => {
  try {
    const userId = req.user._id;

    // Hammasini olish (isRead: true yoki false)
    const notifications = await Notification.find({ recipient: userId })
      .sort({ createdAt: -1 })
      .populate('sender', 'username');

    // O'qilmaganlar sonini aniqlash
    const unreadCount = await Notification.countDocuments({ recipient: userId, isRead: false });

    res.status(200).json({message:"Notifications",notifications,unreadCount});
  } catch (error) {
    console.log(error);
    res.status(503).json({ message: error.message });
  }
},
  checkNTF: async (req, res) => {
    try {
       const userId = req.user._id;
       const { id } = req.params;


    const updated = await Notification.findOneAndUpdate(
      { _id: id, recipient: userId, isRead: false },
      { $set: { isRead: true } },
      { new: true }
    );

    if (!updated) {
      return res.status(404).json({ message: "Notification not found or already read." });
    }

    // Yangilangan holatni qaytaramiz
    res.status(200).json({ message: "Notification marked as read.", notification: updated });
    } catch (error) {
      console.log(error);
      res.status(503).json({ message: error.message });
    }
  },
deleteOneNTF: async (req, res) => {
  try {
    const userId = req.user._id;
    const { id } = req.params; // notificationId

    const notification = await Notification.findById(id)
      .populate('sender', 'username')

    if (!notification) {
      return res.status(404).json({ message: "Notification not found" });
    }

    // Faqat egasi yoki admin o‘chira oladi
    if (notification.recipient.toString() !== userId.toString() ) {
      return res.status(403).json({ message: "You don't have permission to delete this notification" });
    }

    await notification.deleteOne();

    res.status(200).json({
      message: "Notification deleted successfully.",
      deletedNotification: notification
    });

  } catch (error) {
    console.log(error);
    res.status(503).json({ message: error.message });
  }
},

deleteAllNTF: async (req, res) => {
  try {
    const userId = req.user._id;
    const notificationsToDelete = await Notification.find({ recipient: userId })
      .populate('sender', 'username ')
      .sort({ createdAt: -1 });

   
    await Notification.deleteMany({ recipient: userId });

    res.status(200).json({
      message: "All your notifications deleted successfully.",
      deletedNotifications: notificationsToDelete
    });
  } catch (error) {
    console.log(error);
    res.status(503).json({ message: error.message });
  }
}



  


}
module.exports=notficantionCtrl

aloqdor joyilari:
 likePost: async (req, res) => {
    try {
      const { postId } = req.params;
      const userId = req.user._id;
      const io = req.app.get('io');
      const post = await Post.findById(postId);
      if (!post) {
        return res.status(404).json({ message: "Post not found" });
      }

      const isLiked = post.likes.includes(userId);
      if (isLiked) {
        //  unliked
        post.likes.pull(userId);
      } else {
        // like
        post.likes.push(userId);
        if (userId.toString() !== post.userId.toString()) {
          await notificationM.create({
            recipient: post.userId,
            sender: userId,
            type: 'like',
            postId: post._id
          });
            io.to(post.userId.toString()).emit('newNotification', {
           type: 'like',
           sender: userId,
           postId: post._id
  });
        }
      }

     
      await post.save();


      res.status(200).json({
        message: isLiked ? "Post unliked" : "Post liked",
        likesCount: post.likes.length,
        allLikes: post
      });
    } catch (error) {
      console.log(error);
      res.status(503).json({ message: error.message });
    }
  },
  addComment
  ,  follow: async (req, res) => {
    try {
      const { id } = req.params; // kimni follow qilish kerak
      const userId = req.user._id;    // kim follow qilyapti
      const io = req.app.get('io');

      if (userId === id) {
        return res.status(400).json({ message: "You can't follow yourself" });
      }

      const userToFollow = await User.findById(id);
      const currentUser = await User.findById(userId);

      if (!userToFollow || !currentUser) {
        return res.status(404).json({ message: "User not found" });
      }

      const isFollowing = userToFollow.follower.includes(userId);

      if (isFollowing) {
        // unfollow
        userToFollow.follower.pull(userId);
        currentUser.followed.pull(id);
      } else {
        // follow
        userToFollow.follower.push(userId);
        currentUser.followed.push(id);
        await notificationM.create({
          recipient: userToFollow._id,
          sender: userId,
          type: 'follow'
        });
        io.to(userToFollow._id.toString()).emit('newNotification', {
          type: 'follow',
          sender: userId
        });

      }

      await userToFollow.save();
      await currentUser.save();

      res.status(200).json({
        message: isFollowing ? "Unfollowed successfully" : "Followed successfully",
        followersCount: userToFollow.follower.length,
        user: userToFollow
      });

    } catch (error) {
      console.log(error);
      res.status(503).json({ message: error.message });
    }
  },
  const express = require("express")
const fileupload = require("express-fileupload")
const dotenv = require("dotenv")
const cors = require("cors")
const mongoose = require("mongoose")
const socketIo = require("socket.io")


const path = require("path")
const http = require("http")
const fs = require("fs")
dotenv.config()

// import....
const authR=require('./src/router/authRouter')
const postR=require('./src/router/postRouter')
const userR =require('./src/router/userRouter')
const commentR =require('./src/router/commentRouter')
const notficantionR =require('./src/router/notificationR')
 
const app=express()

const PORT= process.env.PORT||4001

const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*", // xavfsizlik uchun kerak bo‘lsa o‘zgartiring
    // methods: ["*"]
  }
});

app.set('io', io); 
app.use(cors())
app.use(express.json())
app.use(express.urlencoded({extended:true}))
app.use(fileupload({useTempFiles:true}))
 
/// router..
app.use("/api",authR)
app.use("/api",postR)
app.use("/api",userR)
app.use("/api",commentR)
app.use("/api",notficantionR)




const MONGO_URL=process.env.MONGO_URL
mongoose.connect(MONGO_URL).then(()=>{
    server.listen(PORT,()=>{console.log(`${PORT}-working`);
    })
}).catch((err)=>{
    console.log(err);
    
})